"use strict";
// Buffer Source Conversion
// ------------------------
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unsafeCompareBufferSources = exports.unsafeCompareUint8Arrays = exports.compareBufferSources = exports.compareUint8Arrays = exports.splitBufferSource = exports.splitUint8Array = exports.concatBufferSources = exports.concatUint8Arrays = exports.bytesToHexArray = exports.bytesToHexString = exports.hexStringToBytes = exports.hexToByte = exports.byteToHex = exports.bufferSourceToDataView = exports.bufferSourceToUint8Array = void 0;
var bufferSourceToUint8Array = function (bs) { return bs instanceof ArrayBuffer
    ? new Uint8Array(bs)
    : new Uint8Array(bs.buffer, bs.byteOffset, bs.byteLength); };
exports.bufferSourceToUint8Array = bufferSourceToUint8Array;
var bufferSourceToDataView = function (bs) { return bs instanceof ArrayBuffer
    ? new DataView(bs)
    : new DataView(bs.buffer, bs.byteOffset, bs.byteLength); };
exports.bufferSourceToDataView = bufferSourceToDataView;
var bs2u8 = exports.bufferSourceToUint8Array;
var bs2dv = exports.bufferSourceToDataView;
// Hex Functions
// -------------
var byteToHex = function (byte) { return byte.toString(16).padStart(2, '0'); };
exports.byteToHex = byteToHex;
var hexToByte = function (hexOctet) { return parseInt(hexOctet, 16); };
exports.hexToByte = hexToByte;
var hexStringToBytes = function (hexString) { return new Uint8Array(hexString.match(/[0-9a-f]{1,2}/ig).map(exports.hexToByte)); };
exports.hexStringToBytes = hexStringToBytes;
var bytesToHexString = function (bufferSource) { return Array.from(bs2u8(bufferSource), function (byte) { return exports.byteToHex(byte); }).join(''); };
exports.bytesToHexString = bytesToHexString;
var bytesToHexArray = function (bufferSource) { return Array.from(bs2u8(bufferSource), function (byte) { return exports.byteToHex(byte); }); };
exports.bytesToHexArray = bytesToHexArray;
// Concatenation
// -------------
function concatUint8Arrays() {
    var uint8Arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        uint8Arrays[_i] = arguments[_i];
    }
    var size = uint8Arrays.reduce(function (size, u8) { return size + u8.length; }, 0);
    var res = new Uint8Array(size);
    var i = 0;
    for (var _a = 0, uint8Arrays_1 = uint8Arrays; _a < uint8Arrays_1.length; _a++) {
        var u8 = uint8Arrays_1[_a];
        res.set(u8, i);
        i += u8.length;
    }
    return res;
}
exports.concatUint8Arrays = concatUint8Arrays;
function concatBufferSources() {
    var bufferSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        bufferSources[_i] = arguments[_i];
    }
    return concatUint8Arrays.apply(void 0, bufferSources.map(bs2u8));
}
exports.concatBufferSources = concatBufferSources;
// Splitting
// ---------
function splitUint8Array(uint8Array) {
    var indices = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        indices[_i - 1] = arguments[_i];
    }
    var result = new Array(indices.length + 1);
    var prev = 0;
    var i = 0;
    for (var _a = 0, indices_1 = indices; _a < indices_1.length; _a++) {
        var index = indices_1[_a];
        result[i++] = uint8Array.subarray(prev, index);
        prev = index;
    }
    result[i] = uint8Array.subarray(prev);
    return result;
}
exports.splitUint8Array = splitUint8Array;
function splitBufferSource(bufferSource) {
    var indices = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        indices[_i - 1] = arguments[_i];
    }
    return splitUint8Array.apply(void 0, __spreadArrays([bs2u8(bufferSource)], indices));
}
exports.splitBufferSource = splitBufferSource;
// Comparison
// ----------
function compareUint8Arrays(u8_1) {
    var u8s = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        u8s[_i - 1] = arguments[_i];
    }
    if (u8s.some(function (u8_i) { return u8_1.byteLength !== u8_i.byteLength; }))
        return false;
    var res = true;
    for (var _a = 0, u8s_1 = u8s; _a < u8s_1.length; _a++) {
        var u8_i = u8s_1[_a];
        for (var i = 0; i !== u8_1.length; i++) {
            var r = u8_1[i] === u8_i[i];
            res = r && res;
        }
    }
    return res;
}
exports.compareUint8Arrays = compareUint8Arrays;
function compareDataViewsUint32(dv_1) {
    var dvs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        dvs[_i - 1] = arguments[_i];
    }
    if (dvs.some(function (dv_i) { return dv_1.byteLength !== dv_i.byteLength; }))
        return false;
    var res = true;
    for (var _a = 0, dvs_1 = dvs; _a < dvs_1.length; _a++) {
        var dv_i = dvs_1[_a];
        for (var i = 0; i !== dv_1.byteLength; i += 4) {
            var r = dv_1.getUint32(i) === dv_i.getUint32(i);
            res = r && res;
        }
    }
    return res;
}
function compareBufferSources(bufferSource) {
    var bufferSources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        bufferSources[_i - 1] = arguments[_i];
    }
    return compareDataViewsUint32.apply(void 0, __spreadArrays([bs2dv(bufferSource)], bufferSources.map(bs2dv)));
}
exports.compareBufferSources = compareBufferSources;
function unsafeCompareUint8Arrays(u8_1) {
    var u8s = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        u8s[_i - 1] = arguments[_i];
    }
    if (u8s.some(function (u8_i) { return u8_1.byteLength !== u8_i.byteLength; }))
        return false;
    return u8s.every(function (u8_i) {
        for (var i = 0; i !== u8_1.length; i++)
            if (u8_1[i] !== u8_i[i])
                return false;
        return true;
    });
}
exports.unsafeCompareUint8Arrays = unsafeCompareUint8Arrays;
function unsafeCompareDataViewsUint32(dv_1) {
    var dvs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        dvs[_i - 1] = arguments[_i];
    }
    if (dvs.some(function (dv_i) { return dv_1.byteLength !== dv_i.byteLength; }))
        return false;
    return dvs.every(function (dv_i) {
        for (var i = 0; i !== dv_i.byteLength; i += 4) {
            if (dv_1.getUint32(i) !== dv_i.getUint32(i)) {
                return false;
            }
        }
        return true;
    });
}
function unsafeCompareBufferSources(bufferSource) {
    var bufferSources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        bufferSources[_i - 1] = arguments[_i];
    }
    return unsafeCompareDataViewsUint32.apply(void 0, __spreadArrays([bs2dv(bufferSource)], bufferSources.map(bs2dv)));
}
exports.unsafeCompareBufferSources = unsafeCompareBufferSources;
//# sourceMappingURL=index.js.map