{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,eAAe;IAC7B,MAAM,CAAC,GAAG,QAAQ,CAAC,eAAe,CAAC;IACnC,MAAM,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;IACxB,MAAM,EAAE,GAAG,cAAc,CAAC;IAC1B,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC;AAED,MAAM,UAAU,aAAa;IAC3B,OAAO,MAAM,CAAC,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC;AACxD,CAAC;AAED,MAAM,UAAU,YAAY;IAC1B,OAAO,MAAM,CAAC,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;AACvD,CAAC;AAED,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,EAAW,EAAE,QAAgB,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,IAAU,EAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;AAE5H,2EAA2E;AAC3E,MAAM,UAAU,gBAAgB,CAAC,EAAkB,EAAE,QAAgB;IACnE,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,OAAO,IAAI,IAAI,IAAI,EAAE;QACnB,IAAI,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;YAAE,OAAO,IAAI,CAAC;QACzC,IAAI,GAAG,IAAI,CAAC,UAAU,YAAY,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;KACpE;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,OAAe;IAChD,OAAO,QAAQ,CAAC,WAAW,EAAE,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;AAClE,CAAC;AAKD,MAAM,UAAU,uBAAuB;IACrC,IAAI,GAAiB,CAAC;IACtB,IAAI,GAAc,CAAC;IACnB,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAyB,CAAC;IAClF,OAAO,CAAC,OAAO,GAAG,GAAG,CAAC;IACtB,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC;IACrB,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["export function getScrollHeight() {\n  const h = document.documentElement;\n  const b = document.body;\n  const sh = \"scrollHeight\";\n  return h[sh] || b[sh];\n}\n\nexport function getScrollLeft() {\n  return window.pageXOffset || document.body.scrollLeft;\n}\n\nexport function getScrollTop() {\n  return window.pageYOffset || document.body.scrollTop;\n}\n\nexport const matches = (el: Element, selector: string) => (el.matches || (<any>el)['msMatchesSelector']).call(el, selector);\n\n// Checks if this element or any of its parents matches a given `selector`.\nexport function matchesAncestors(el: Element | null, selector: string): Element | null {\n  let curr = el;\n  while (curr != null) {\n    if (matches(curr, selector)) return curr;\n    curr = curr.parentNode instanceof Element ? curr.parentNode : null;\n  }\n  return null;\n}\n\nexport function fragmentFromString(strHTML: string): DocumentFragment {\n  return document.createRange().createContextualFragment(strHTML);\n}\n\ntype Resolver<T> = (value: T | PromiseLike<T>) => void;\ntype Rejector = (reason?: any) => void;\ntype ResolvablePromise<T> = Promise<T> & { resolve: Resolver<T>, reject: Rejector }\nexport function createResolvablePromise<T>(): ResolvablePromise<T> {\n  let res!: Resolver<T>;\n  let rej!: Rejector;\n  const promise = new Promise((r, s) => (res = r, rej = s)) as ResolvablePromise<T>;\n  promise.resolve = res;\n  promise.reject = rej;\n  return promise;\n}\n"]}