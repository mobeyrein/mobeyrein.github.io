{"version":3,"file":"element.js","sourceRoot":"","sources":["../src/element.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AACzC,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAE/B,MAAM,OAAO,YAAa,SAAQ,UAAU;IAA5C;;QACE,eAAU,GAAG,IAAI,OAAO,EAAW,CAAC;QAYpC,4CAAuB;QAEvB,MAAC,GAAQ,EAAE,CAAC;IAiBd,CAAC;IA7BC,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,oBAAoB;QAClB,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAMD,YAAY;QACV,uBAAA,IAAI,6BAAgB,IAAI,MAAA,CAAC;IAC3B,CAAC;IAED,OAAO,CAAC,iBAAmC;QACzC,IAAI,CAAC,uBAAA,IAAI,iCAAa;YAAE,KAAK,MAAM,IAAI,IAAI,iBAAiB,CAAC,IAAI,EAAE,EAAE;gBACnE,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC;oBAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAO,IAAK,CAAC,IAAI,CAAC,CAAC,CAAC;aAC1D;QACD,uBAAA,IAAI,6BAAgB,KAAK,MAAA,CAAC;IAC5B,CAAC;IAED,SAAS,CAAI,IAAY,EAAE,aAAkC;QAC3D,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,IAAI,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC;IAC9F,CAAC;CACF;;AAED,MAAM,UAAU,WAAW,CAAI,WAA2B,EAAE,SAA6B;IACvF,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QAC3B,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5D,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,OAAO,WAAW,CAAC;AACrB,CAAC","sourcesContent":["import { LitElement } from \"lit-element\";\nimport { Subject } from \"rxjs\";\n\nexport class RxLitElement extends LitElement {\n  $connected = new Subject<boolean>();\n\n  connectedCallback() { \n    super.connectedCallback();\n    this.$connected.next(true);\n  }\n\n  disconnectedCallback() { \n    super.disconnectedCallback();\n    this.$connected.next(false);\n  }\n\n  #firstUpdate!: boolean;\n\n  $: any = {};\n\n  firstUpdated() {\n    this.#firstUpdate = true;\n  }\n\n  updated(changedProperties: Map<string, any>) {\n    if (!this.#firstUpdate) for (const prop of changedProperties.keys()) {\n      if (prop in this.$) this.$[prop].next((<any>this)[prop]);\n    }\n    this.#firstUpdate = false;\n  }\n\n  fireEvent<T>(name: string, eventInitDict?: CustomEventInit<T>) {\n    this.dispatchEvent(new CustomEvent(name, eventInitDict));\n    this.dispatchEvent(new CustomEvent(`${this.tagName.toLowerCase()}-${name}`, eventInitDict));\n  }\n}\n\nexport function applyMixins<T>(derivedCtor: Constructor<T>, baseCtors: Constructor<any>[]) {\n  baseCtors.forEach(baseCtor => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    });\n  });\n  return derivedCtor;\n}"]}