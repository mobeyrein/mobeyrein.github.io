{"version":3,"file":"creators.js","sourceRoot":"","sources":["../src/creators.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,MAAM,CAAC;AACnD,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAEzD,MAAM,UAAU,OAAO,CAAC,KAAkB,EAAE,IAAkB;IAC5D,OAAO,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;QAC/B,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;QACzC,MAAM,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC;QAE9B,IAAI,QAAQ,GAAoB,IAAI,CAAC;QACrC,KAAK,CAAC,KAAK,EAAE,EAAE,GAAG,IAAI,EAAE,MAAM,EAAE,CAAC;aAC9B,IAAI,CAAC,CAAC,CAAC,EAAE;YACR,QAAQ,GAAG,CAAC,CAAC;YACb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACtB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjC,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ;YAAE,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,GAAmB;IAChD,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE;QACxB,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,GAAG,CAAC,QAAQ;YAAE,GAAG,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;;YAAM,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC7E,OAAO,GAAG,EAAE;YACV,IAAI,GAAG,CAAC,QAAQ;gBAAE,GAAG,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;;gBAAM,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACrF,CAAC,CAAA;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,KAAK,CAAC,QAA4E,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAU;IAC7I,OAAO,eAAe,EAAE,CAAC,IAAI,CAC3B,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,EAC7B,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EACrB,OAAO,CAAC,CAAC,CAAC,EACV,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAClC,CAAA;AACH,CAAC","sourcesContent":["import { Observable, animationFrames } from \"rxjs\";\nimport { map, takeWhile, endWith } from \"rxjs/operators\";\n\nexport function fetchRx(input: RequestInfo, init?: RequestInit): Observable<Response> {\n  return new Observable(observer => {\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    let response: Response | null = null;\n    fetch(input, { ...init, signal })\n      .then(r => {\n        response = r;\n        observer.next(r);\n        observer.complete();\n      })\n      .catch(x => observer.error(x));\n\n    return () => { if (!response) controller.abort(); };\n  });\n}\n\nexport function fromMediaQuery(mql: MediaQueryList): Observable<MediaQueryListEvent> {\n  return new Observable(o => {\n    const l = o.next.bind(o);\n    if (mql.onchange) mql.addEventListener('change', l); else mql.addListener(l);\n    return () => {\n      if (mql.onchange) mql.removeEventListener('change', l); else mql.removeListener(l);\n    }\n  });\n}\n\nexport function tween(easingFn: (t: number, b: number, c: number, d: number, s?: number) => number, b: number, c: number, d: number, s?: number): Observable<number> {\n  return animationFrames().pipe(\n    map(({ elapsed }) => elapsed),\n    takeWhile(t => t < d),\n    endWith(d),\n    map(t => easingFn(t, b, c, d, s)),\n  )\n}\n"]}