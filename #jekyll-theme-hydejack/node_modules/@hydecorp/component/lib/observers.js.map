{"version":3,"file":"observers.js","sourceRoot":"","sources":["../src/observers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,MAAM,UAAU,sBAAsB,CAAC,EAAe;IACpD,OAAO,IAAI,UAAU,CAAC,CAAC,GAAG,EAAE,EAAE;QAC5B,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACrB,OAAO,GAAG,EAAE,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,EAAe,EAAE,OAA8B;IACtF,OAAO,IAAI,UAAU,CAAC,CAAC,GAAG,EAAE,EAAE;QAC5B,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAC9B,OAAO,GAAG,EAAE,GAAG,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,4BAA4B,CAAC,GAA8B,EAAE,OAAkC;IAC7G,OAAO,IAAI,UAAU,CAAC,CAAC,GAAG,EAAE,EAAE;QAC5B,MAAM,QAAQ,GAAG,IAAI,oBAAoB,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;QAEvE,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;YAAE,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;;YAC3D,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAE3B,OAAO,GAAG,EAAE;YACV,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;gBAAE,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;;gBAC7D,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { Observable } from \"rxjs\";\n\nexport function createResizeObservable(el: HTMLElement): Observable<ResizeObserverEntry> {\n  return new Observable((obs) => {\n    const observer = new ResizeObserver(xs => xs.forEach(x => obs.next(x)));\n    observer.observe(el);\n    return () => { observer.unobserve(el); };\n  });\n}\n\nexport function createMutationObservable(el: HTMLElement, options?: MutationObserverInit): Observable<MutationRecord> {\n  return new Observable((obs) => {\n    const observer = new MutationObserver(xs => xs.forEach(x => obs.next(x)));\n    observer.observe(el, options);\n    return () => { observer.disconnect(); };\n  });\n}\n\nexport function createIntersectionObservable(els: HTMLElement|HTMLElement[], options?: IntersectionObserverInit): Observable<IntersectionObserverEntry[]> {\n  return new Observable((obs) => {\n    const observer = new IntersectionObserver(xs => obs.next(xs), options);\n\n    if (Array.isArray(els)) els.forEach(el => observer.observe(el));\n    else observer.observe(els);\n\n    return () => {\n      if (Array.isArray(els)) els.forEach(el => observer.unobserve(el));\n      else observer.unobserve(els);\n    };\n  });\n}"]}