{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { UUID } from \"uuid-class\";\nimport { concatBufferSources } from 'typed-array-utils';\n\ntype Bytes =\n  | Int8Array \n  | Int16Array \n  | Int32Array \n  | Uint8Array \n  | Uint16Array \n  | Uint32Array \n  | Uint8ClampedArray \n  | Float32Array \n  | Float64Array \n  | DataView \n  | ArrayBuffer;\n\nconst BASE_DIFFICULTY = 8;\nconst BASE_CLAPS = 15;\n\nconst sha256 = (data: Bytes) => crypto.subtle.digest('SHA-256', data);\nconst digest = (message: string) => sha256(new TextEncoder().encode(message));\n\nasync function makeKey({ url, id, claps, nonce }: {\n  url: URL | string,\n  id: UUID | string,\n  claps: number,\n  nonce: number,\n}) {\n  return concatBufferSources(\n    await digest(url.toString()),\n    new UUID(id.toString()),\n    new Uint32Array([claps]),\n    new Uint32Array([nonce]),\n  ).buffer;\n}\n\nfunction leadingZeros(ab: ArrayBuffer, n: number) {\n  const u8 = new Uint8Array(ab);\n  const nb = Math.ceil(n / 8);\n  for (let i = 0; i < nb; i++) {\n    const ni = Math.min(8, n - i * 8);\n    for (let j = 0; j < ni; j++) {\n      if (((u8[i] >> (7 - j)) & 0b00000001) !== 0) return false;\n    }\n  }\n  return true;\n}\n\nconst calcDifficulty = (claps: number) => BASE_DIFFICULTY + Math.round(Math.log2(BASE_CLAPS + claps));\n\nexport async function proofOfClap({ url, claps, id }: {\n  url: URL | string,\n  id: UUID | string,\n  claps: number,\n}) {\n  const difficulty = calcDifficulty(claps);\n\n  let nonce = 0;\n\n  const key = new Uint32Array(await makeKey({ url, id, claps, nonce }));\n  let hash = await sha256(key);\n\n  while (!leadingZeros(hash, difficulty)) {\n    nonce++;\n    key[key.length - 1] = nonce;\n    hash = await sha256(key);\n  }\n\n  return nonce;\n}\n\nexport async function checkProofOfClap({ url, claps, id, nonce }: {\n  url: URL | string,\n  claps: number,\n  id: UUID | string,\n  nonce: number,\n}) {\n  const difficulty = calcDifficulty(claps);\n  const hash = await sha256(await makeKey({ url, id, claps, nonce }));\n  return leadingZeros(hash, difficulty);\n}\n"]}