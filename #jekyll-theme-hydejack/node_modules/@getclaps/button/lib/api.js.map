{"version":3,"file":"api.js","sourceRoot":"","sources":["../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { UUID } from 'uuid-class';\nimport { proofOfClap } from '@getclaps/proof-of-clap';\n\nconst API = Reflect.get(window, 'GET_CLAPS_API') || \"https://worker.getclaps.app\";\n\ntype HrefIndex = { [href: string]: { claps: number } };\n\nfunction paramsURL(url: string, params?: Record<string, string> | null, base?: string | URL) {\n  const u = new URL(url, base);\n  for (const [k, v] of Object.entries(params || {})) u.searchParams.append(k, v);\n  return u.href;\n}\n\nconst fetchMap = new Map<string, Promise<HrefIndex>>();\nlet referrerSent = false;\n\nexport const getClaps = async (href: string, parentHref: string, referrer: string): Promise<{ claps: number }> => {\n  let indexPromise = fetchMap.get(parentHref);\n  if (!indexPromise) {\n    fetchMap.set(parentHref, indexPromise = fetchMap.get(parentHref) || (async () => {\n      const url = paramsURL('/views', {\n        href: parentHref,\n        ...referrer && !referrerSent ? { referrer } : {}\n      }, API);\n\n      const response = await fetch(url, {\n        method: 'POST',\n        body: null,\n        mode: 'cors',\n        credentials: 'include',\n        headers: { 'accept': 'application/json' },\n      });\n\n      referrerSent = true;\n\n      if (response.ok && response.headers.get('Content-Type')?.includes('json')) {\n        return await response.json();\n      } else if (response.status === 404) {\n        return {};\n      } else if (response.status === 402) {\n        throw response;\n      } else {\n        fetchMap.delete(parentHref);\n        throw Error();\n      }\n    })());\n  }\n\n  const index: HrefIndex = await indexPromise;\n  return index[href] || { claps: 0 }\n}\n\nexport const mine = async (claps: number, href: string) => {\n  const url = new URL(href);\n  url.search = '';\n\n  const id = new UUID();\n  const nonce = await proofOfClap({ url, claps, id });\n\n  return { href: url.href, id, nonce };\n}\n\nexport const updateClapsApi = async (claps: number, href: string, parentHref: string, id: UUID, nonce: number): Promise<{ claps: number }> => {\n  const url = paramsURL('/claps', { href }, API)\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({ claps, id, nonce }),\n    mode: 'cors',\n    credentials: 'include',\n    headers: { \n      'accept': 'application/json', \n      'content-type': 'application/json;charset=UTF-8',\n    },\n  });\n  if (response.ok && response.headers.get('Content-Type')?.includes('json')) {\n    fetchMap.delete(parentHref); // TODO: update in place instead?\n    return response.clone().json();\n  } else {\n    throw Error();\n  }\n};\n\nexport const cleanUp = (parentHref: string) => {\n  fetchMap.delete(parentHref);\n}\n"]}