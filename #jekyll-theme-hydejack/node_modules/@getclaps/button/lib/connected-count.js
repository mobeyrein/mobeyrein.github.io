var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _ref;
import { LitElement } from "lit-element";
const refCountMap = new Map();
export class ConnectedCountElement extends LitElement {
    constructor() {
        super(...arguments);
        _ref.set(this, void 0);
    }
    get connectedCountKey() { return undefined; }
    ;
    allDisconnectedCallback() { }
    ;
    connectedCallback() {
        var _a;
        super.connectedCallback();
        __classPrivateFieldSet(this, _ref, (_a = this.connectedCountKey) !== null && _a !== void 0 ? _a : this);
        refCountMap.set(__classPrivateFieldGet(this, _ref), 1 + (refCountMap.get(__classPrivateFieldGet(this, _ref)) || 0));
    }
    disconnectedCallback() {
        var _a;
        super.disconnectedCallback();
        const refCount = ((refCountMap === null || refCountMap === void 0 ? void 0 : refCountMap.get(__classPrivateFieldGet(this, _ref))) || 0) - 1;
        if (refCount > 0) {
            refCountMap.set(__classPrivateFieldGet(this, _ref), refCount);
        }
        else {
            refCountMap.delete(__classPrivateFieldGet(this, _ref));
            (_a = this.allDisconnectedCallback) === null || _a === void 0 ? void 0 : _a.call(this);
        }
    }
}
_ref = new WeakMap();
//# sourceMappingURL=connected-count.js.map