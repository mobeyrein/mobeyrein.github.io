"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UUID = void 0;
var typed_array_utils_1 = require("typed-array-utils");
function _bytesToUUIDString(uint8Array) {
    var hexArray = typed_array_utils_1.bytesToHexArray(uint8Array);
    hexArray.splice(4, 0, '-');
    hexArray.splice(7, 0, '-');
    hexArray.splice(10, 0, '-');
    hexArray.splice(13, 0, '-');
    return hexArray.join('');
}
function _v4() {
    var uuid = crypto.getRandomValues(new Uint8Array(16));
    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    uuid[6] = (uuid[6] & 0x0f) | 0x40;
    uuid[8] = (uuid[8] & 0x3f) | 0x80;
    return uuid.buffer;
}
function _fromString(str) {
    var hex = str.replace(/[^0-9a-f]/gi, '').slice(0, 32);
    if (hex.length < 32)
        throw Error('UUID too short');
    return typed_array_utils_1.hexStringToBytes(hex).buffer;
}
function stringToBytes(str) {
    str = unescape(encodeURIComponent(str)); // UTF8 escape
    return new TextEncoder().encode(str);
}
function _v5(value, namespace) {
    return __awaiter(this, void 0, void 0, function () {
        var valueBytes, namespaceUUID, hashBytes, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    valueBytes = typeof value === 'string'
                        ? stringToBytes(value)
                        : typed_array_utils_1.bufferSourceToUint8Array(value);
                    namespaceUUID = typeof namespace === 'string'
                        ? new UUID(namespace)
                        : namespace;
                    _a = Uint8Array.bind;
                    return [4 /*yield*/, crypto.subtle.digest('SHA-1', typed_array_utils_1.concatUint8Arrays(namespaceUUID, valueBytes))];
                case 1:
                    hashBytes = new (_a.apply(Uint8Array, [void 0, _b.sent()]))();
                    hashBytes[6] = (hashBytes[6] & 0x0f) | 0x50; // version
                    hashBytes[8] = (hashBytes[8] & 0x3f) | 0x80;
                    return [2 /*return*/, hashBytes.buffer.slice(0, 16)];
            }
        });
    });
}
/**
 * A better UUID class for JavaScript.
 *
 * UUID are represented as bytes (`Uint8Array`) and converted to strings on-demand.
 *
 * This class implements `toString` and `toJSON` for better language integration,
 * as well as inspection for node and Deno for a better development experience.
 *
 * For the most part, `UUID` can be used where  UUID strings are used,
 * except for equality checks. For those cases, `UUID` provides quick access
 * to the string representations via the `id` field.
 */
var UUID = /** @class */ (function (_super) {
    __extends(UUID, _super);
    function UUID(value, byteOffset) {
        var _this = this;
        if (value == null) {
            _this = _super.call(this, _v4()) || this;
        }
        else if (typeof value === 'string') {
            _this = _super.call(this, _fromString(value)) || this;
        }
        else if (value instanceof UUID) {
            _this = _super.call(this, value.buffer.slice(0)) || this;
        }
        else {
            var u8 = value instanceof ArrayBuffer || value instanceof SharedArrayBuffer
                ? new Uint8Array(value, byteOffset !== null && byteOffset !== void 0 ? byteOffset : 0, 16)
                : 'length' in value ? new Uint8Array(value) : new Uint8Array(value);
            if (u8.length < 16)
                throw Error('UUID too short');
            _this = _super.call(this, u8.buffer.slice(0, 16)) || this;
        }
        return _this;
    }
    /**
     * Generate a new UUID version 4 (random).
     *
     * __Note that `crypto.getRandomValues` needs to be available in the global JS object!__
     */
    UUID.v4 = function () {
        return new UUID(_v4());
    };
    /**
     * Generated a new UUID version 5 (hashed)
     *
     * __Note that `crypto.subtle` needs to be available in the global JS object (Not the case on non-HTTPS sites)!__
     *
     * @param value
     * @param namespace
     */
    UUID.v5 = function (value, namespace) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = UUID.bind;
                        return [4 /*yield*/, _v5(value, namespace)];
                    case 1: return [2 /*return*/, new (_a.apply(UUID, [void 0, _b.sent()]))()];
                }
            });
        });
    };
    Object.defineProperty(UUID.prototype, "id", {
        /**
         * Quick access to the string representation for easier comparison.
         * @example if (myUUID.id === otherUUID.id) { ... }
         */
        get: function () {
            return _bytesToUUIDString(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UUID.prototype, "uuid", {
        /**
         * Quick access to the UUID string representation for easier comparison.
         * @example if (myUUID.uuid === otherUUID.uuid) { ... }
         */
        get: function () {
            return _bytesToUUIDString(this);
        },
        enumerable: false,
        configurable: true
    });
    UUID.prototype.toString = function () {
        return _bytesToUUIDString(this);
    };
    UUID.prototype.toJSON = function () {
        return _bytesToUUIDString(this);
    };
    Object.defineProperty(UUID, Symbol.species, {
        // We don't operations like `map`, `subarray`, etc. to preserve the UUID class status
        get: function () { return Uint8Array; },
        enumerable: false,
        configurable: true
    });
    return UUID;
}(Uint8Array));
exports.UUID = UUID;
// Better inspection for node and deno:
var nodeInspect = Symbol.for('nodejs.util.inspect.custom');
// @ts-ignore
var denoInspect = typeof Deno !== 'undefined'
    // @ts-ignore
    ? 'symbols' in Deno ? Deno.symbols.customInspect : Deno.customInspect
    : Symbol();
// @ts-ignore
UUID.prototype[nodeInspect] = function () { return "UUID [ " + this.uuid + " ]"; };
// @ts-ignore
UUID.prototype[denoInspect] = function () { return "UUID [ " + this.uuid + " ]"; };
//# sourceMappingURL=index.js.map