{"version":3,"file":"index.js","sources":["../node_modules/typed-array-utils/index.js","../index.js"],"sourcesContent":["// Buffer Source Conversion\n// ------------------------\nexport const bufferSourceToUint8Array = (bs) => bs instanceof ArrayBuffer\n    ? new Uint8Array(bs)\n    : new Uint8Array(bs.buffer, bs.byteOffset, bs.byteLength);\nexport const bufferSourceToDataView = (bs) => bs instanceof ArrayBuffer\n    ? new DataView(bs)\n    : new DataView(bs.buffer, bs.byteOffset, bs.byteLength);\nconst bs2u8 = bufferSourceToUint8Array;\nconst bs2dv = bufferSourceToDataView;\n// Hex Functions\n// -------------\nexport const byteToHex = (byte) => byte.toString(16).padStart(2, '0');\nexport const hexToByte = (hexOctet) => parseInt(hexOctet, 16);\nexport const hexStringToBytes = (hexString) => new Uint8Array(hexString.match(/[0-9a-f]{1,2}/ig).map(hexToByte));\nexport const bytesToHexString = (bufferSource) => Array.from(bs2u8(bufferSource), byte => byteToHex(byte)).join('');\nexport const bytesToHexArray = (bufferSource) => Array.from(bs2u8(bufferSource), byte => byteToHex(byte));\n// Concatenation\n// -------------\nexport function concatUint8Arrays(...uint8Arrays) {\n    const size = uint8Arrays.reduce((size, u8) => size + u8.length, 0);\n    const res = new Uint8Array(size);\n    let i = 0;\n    for (const u8 of uint8Arrays) {\n        res.set(u8, i);\n        i += u8.length;\n    }\n    return res;\n}\nexport function concatBufferSources(...bufferSources) {\n    return concatUint8Arrays(...bufferSources.map(bs2u8));\n}\n// Splitting\n// ---------\nexport function splitUint8Array(uint8Array, ...indices) {\n    const result = new Array(indices.length + 1);\n    let prev = 0;\n    let i = 0;\n    for (const index of indices) {\n        result[i++] = uint8Array.subarray(prev, index);\n        prev = index;\n    }\n    result[i] = uint8Array.subarray(prev);\n    return result;\n}\nexport function splitBufferSource(bufferSource, ...indices) {\n    return splitUint8Array(bs2u8(bufferSource), ...indices);\n}\n// Comparison\n// ----------\nexport function compareUint8Arrays(u8_1, ...u8s) {\n    if (u8s.some(u8_i => u8_1.byteLength !== u8_i.byteLength))\n        return false;\n    let res = true;\n    for (const u8_i of u8s) {\n        for (let i = 0; i !== u8_1.length; i++) {\n            const r = u8_1[i] === u8_i[i];\n            res = r && res;\n        }\n    }\n    return res;\n}\nfunction compareDataViewsUint32(dv_1, ...dvs) {\n    if (dvs.some(dv_i => dv_1.byteLength !== dv_i.byteLength))\n        return false;\n    let res = true;\n    for (const dv_i of dvs) {\n        for (let i = 0; i !== dv_1.byteLength; i += 4) {\n            const r = dv_1.getUint32(i) === dv_i.getUint32(i);\n            res = r && res;\n        }\n    }\n    return res;\n}\nexport function compareBufferSources(bufferSource, ...bufferSources) {\n    return compareDataViewsUint32(bs2dv(bufferSource), ...bufferSources.map(bs2dv));\n}\nexport function unsafeCompareUint8Arrays(u8_1, ...u8s) {\n    if (u8s.some(u8_i => u8_1.byteLength !== u8_i.byteLength))\n        return false;\n    return u8s.every(u8_i => {\n        for (let i = 0; i !== u8_1.length; i++)\n            if (u8_1[i] !== u8_i[i])\n                return false;\n        return true;\n    });\n}\nfunction unsafeCompareDataViewsUint32(dv_1, ...dvs) {\n    if (dvs.some((dv_i) => dv_1.byteLength !== dv_i.byteLength))\n        return false;\n    return dvs.every(dv_i => {\n        for (let i = 0; i !== dv_i.byteLength; i += 4) {\n            if (dv_1.getUint32(i) !== dv_i.getUint32(i)) {\n                return false;\n            }\n        }\n        return true;\n    });\n}\nexport function unsafeCompareBufferSources(bufferSource, ...bufferSources) {\n    return unsafeCompareDataViewsUint32(bs2dv(bufferSource), ...bufferSources.map(bs2dv));\n}\n//# sourceMappingURL=index.js.map","import { bufferSourceToUint8Array, bytesToHexArray, concatUint8Arrays, hexStringToBytes } from 'typed-array-utils';\nfunction _bytesToUUIDString(uint8Array) {\n    const hexArray = bytesToHexArray(uint8Array);\n    hexArray.splice(4, 0, '-');\n    hexArray.splice(7, 0, '-');\n    hexArray.splice(10, 0, '-');\n    hexArray.splice(13, 0, '-');\n    return hexArray.join('');\n}\nfunction _v4() {\n    const uuid = crypto.getRandomValues(new Uint8Array(16));\n    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    uuid[6] = (uuid[6] & 0x0f) | 0x40;\n    uuid[8] = (uuid[8] & 0x3f) | 0x80;\n    return uuid.buffer;\n}\nfunction _fromString(str) {\n    const hex = str.replace(/[^0-9a-f]/gi, '').slice(0, 32);\n    if (hex.length < 32)\n        throw Error('UUID too short');\n    return hexStringToBytes(hex).buffer;\n}\nfunction stringToBytes(str) {\n    str = unescape(encodeURIComponent(str)); // UTF8 escape\n    return new TextEncoder().encode(str);\n}\nasync function _v5(value, namespace) {\n    const valueBytes = typeof value === 'string'\n        ? stringToBytes(value)\n        : bufferSourceToUint8Array(value);\n    const namespaceUUID = typeof namespace === 'string'\n        ? new UUID(namespace)\n        : namespace;\n    const hashBytes = new Uint8Array(await crypto.subtle.digest('SHA-1', concatUint8Arrays(namespaceUUID, valueBytes)));\n    hashBytes[6] = (hashBytes[6] & 0x0f) | 0x50; // version\n    hashBytes[8] = (hashBytes[8] & 0x3f) | 0x80;\n    return hashBytes.buffer.slice(0, 16);\n}\n/**\n * A better UUID class for JavaScript.\n *\n * UUID are represented as bytes (`Uint8Array`) and converted to strings on-demand.\n *\n * This class implements `toString` and `toJSON` for better language integration,\n * as well as inspection for node and Deno for a better development experience.\n *\n * For the most part, `UUID` can be used where  UUID strings are used,\n * except for equality checks. For those cases, `UUID` provides quick access\n * to the string representations via the `id` field.\n */\nexport class UUID extends Uint8Array {\n    /**\n     * Generate a new UUID version 4 (random).\n     *\n     * __Note that `crypto.getRandomValues` needs to be available in the global JS object!__\n     */\n    static v4() {\n        return new UUID(_v4());\n    }\n    /**\n     * Generated a new UUID version 5 (hashed)\n     *\n     * __Note that `crypto.subtle` needs to be available in the global JS object (Not the case on non-HTTPS sites)!__\n     *\n     * @param value\n     * @param namespace\n     */\n    static async v5(value, namespace) {\n        return new UUID(await _v5(value, namespace));\n    }\n    constructor(value, byteOffset) {\n        if (value == null) {\n            super(_v4());\n        }\n        else if (typeof value === 'string') {\n            super(_fromString(value));\n        }\n        else if (value instanceof UUID) {\n            super(value.buffer.slice(0));\n        }\n        else {\n            const u8 = value instanceof ArrayBuffer || value instanceof SharedArrayBuffer\n                ? new Uint8Array(value, byteOffset !== null && byteOffset !== void 0 ? byteOffset : 0, 16)\n                : 'length' in value ? new Uint8Array(value) : new Uint8Array(value);\n            if (u8.length < 16)\n                throw Error('UUID too short');\n            super(u8.buffer.slice(0, 16));\n        }\n    }\n    /**\n     * Quick access to the string representation for easier comparison.\n     * @example if (myUUID.id === otherUUID.id) { ... }\n     */\n    get id() {\n        return _bytesToUUIDString(this);\n    }\n    /**\n     * Quick access to the UUID string representation for easier comparison.\n     * @example if (myUUID.uuid === otherUUID.uuid) { ... }\n     */\n    get uuid() {\n        return _bytesToUUIDString(this);\n    }\n    toString() {\n        return _bytesToUUIDString(this);\n    }\n    toJSON() {\n        return _bytesToUUIDString(this);\n    }\n    // We don't operations like `map`, `subarray`, etc. to preserve the UUID class status\n    static get [Symbol.species]() { return Uint8Array; }\n}\n// Better inspection for node and deno:\nconst nodeInspect = Symbol.for('nodejs.util.inspect.custom');\n// @ts-ignore\nconst denoInspect = typeof Deno !== 'undefined'\n    // @ts-ignore\n    ? 'symbols' in Deno ? Deno.symbols.customInspect : Deno.customInspect\n    : Symbol();\n// @ts-ignore\nUUID.prototype[nodeInspect] = function () { return `UUID [ ${this.uuid} ]`; };\n// @ts-ignore\nUUID.prototype[denoInspect] = function () { return `UUID [ ${this.uuid} ]`; };\n//# sourceMappingURL=index.js.map"],"names":["bufferSourceToUint8Array","bs","ArrayBuffer","Uint8Array","buffer","byteOffset","byteLength","bs2u8","hexToByte","hexOctet","parseInt","_bytesToUUIDString","uint8Array","hexArray","bufferSource","Array","from","byte","toString","padStart","byteToHex","splice","join","_v4","uuid","crypto","getRandomValues","_fromString","str","hex","replace","slice","length","Error","hexString","match","map","async","_v5","value","namespace","valueBytes","unescape","encodeURIComponent","TextEncoder","encode","namespaceUUID","UUID","hashBytes","subtle","digest","uint8Arrays","size","reduce","u8","res","i","set","concatUint8Arrays","[object Object]","super","SharedArrayBuffer","id","this","static","Symbol","species","nodeInspect","for","denoInspect","Deno","symbols","customInspect","prototype"],"mappings":"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"}